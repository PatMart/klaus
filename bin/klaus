#!/usr/bin/env python

from sys import exit
from os.path import isdir
from optparse import make_option, OptionParser, SUPPRESS_HELP

from dulwich.repo import Repo
from dulwich.errors import NotGitRepository
from klaus import make_app

try:
    from bjoern import run
except ImportError:
    bjoern = None

if __name__ == '__main__':

    usage = "usage: %prog [options] dir [dirs]"

    options = [
        make_option("-i", default="127.0.0.1", dest="interface",
                    help="bind to host/address (default: 127.0.0.1)"),
        make_option("-p", "--port", type=int, default=8080, dest="port",
                    help="webserver port (default: 8080)"),
        make_option("--prefix", type=str, default='/', dest="prefix",
                    help="serve on given sub uri"),
        make_option("-s", "--smarthttp", action="store_true", dest="smarthttp",
                    help="serve git repositories the smart way", default=False),
        make_option("-r", "--use-reloader", action="store_true", dest="reloader",
                    help=SUPPRESS_HELP, default=False),
        make_option("--debug", action="store_true", dest="debug",
                    help=SUPPRESS_HELP, default=False)
    ]

    parser = OptionParser(option_list=options, usage=usage, epilog="klaus, a simple Git viewer")
    (options, args) = parser.parse_args()

    if len(args) == 0:
        parser.print_usage()
        exit(2)

    for path in args[:]:
        try:
            Repo(path)
        except NotGitRepository:
            print '%r: Not a git repository' % path
            args.remove(path)

    app = make_app(args, options.prefix, options.smarthttp)

    if options.debug:
        from werkzeug.debug import DebuggedApplication
        app = DebuggedApplication(app, evalex=True)

    if bjoern and not options.use_reloader:
        run(app, options.interface, options.port)
    else:
        from werkzeug.serving import run_simple
        run_simple(options.interface, options.port, app, use_reloader=options.reloader)
